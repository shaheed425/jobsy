{"ast":null,"code":"// Mock API simulation for frontend data operations\nimport studentsData from './students.json';\nimport employersData from './employers.json';\nimport jobsData from './jobs.json';\nimport applicationsData from './applications.json';\nimport notificationsData from './notifications.json';\n\n// Simulate API delay\nconst delay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Local storage keys\nconst STORAGE_KEYS = {\n  STUDENTS: 'placement_students',\n  EMPLOYERS: 'placement_employers',\n  JOBS: 'placement_jobs',\n  APPLICATIONS: 'placement_applications',\n  NOTIFICATIONS: 'placement_notifications',\n  ADMIN_USER: 'placement_admin'\n};\n\n// Initialize local storage with mock data if not exists\nconst initializeData = () => {\n  if (!localStorage.getItem(STORAGE_KEYS.STUDENTS)) {\n    localStorage.setItem(STORAGE_KEYS.STUDENTS, JSON.stringify(studentsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.EMPLOYERS)) {\n    localStorage.setItem(STORAGE_KEYS.EMPLOYERS, JSON.stringify(employersData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.JOBS)) {\n    localStorage.setItem(STORAGE_KEYS.JOBS, JSON.stringify(jobsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.APPLICATIONS)) {\n    localStorage.setItem(STORAGE_KEYS.APPLICATIONS, JSON.stringify(applicationsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.NOTIFICATIONS)) {\n    localStorage.setItem(STORAGE_KEYS.NOTIFICATIONS, JSON.stringify(notificationsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.ADMIN_USER)) {\n    localStorage.setItem(STORAGE_KEYS.ADMIN_USER, JSON.stringify({\n      username: 'admin',\n      password: 'admin123',\n      role: 'admin'\n    }));\n  }\n};\n\n// Generic CRUD operations\nconst getData = key => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : [];\n};\nconst setData = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\n// Students API\nexport const studentsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.STUDENTS);\n  },\n  getById: async id => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    return students.find(student => student.id === parseInt(id));\n  },\n  create: async studentData => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    const newStudent = {\n      ...studentData,\n      id: Math.max(...students.map(s => s.id), 0) + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    students.push(newStudent);\n    setData(STORAGE_KEYS.STUDENTS, students);\n    return newStudent;\n  },\n  update: async (id, studentData) => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    const index = students.findIndex(student => student.id === parseInt(id));\n    if (index !== -1) {\n      students[index] = {\n        ...students[index],\n        ...studentData,\n        updatedAt: new Date().toISOString()\n      };\n      setData(STORAGE_KEYS.STUDENTS, students);\n      return students[index];\n    }\n    throw new Error('Student not found');\n  },\n  delete: async id => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    const filteredStudents = students.filter(student => student.id !== parseInt(id));\n    setData(STORAGE_KEYS.STUDENTS, filteredStudents);\n    return true;\n  }\n};\n\n// Employers API\nexport const employersAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.EMPLOYERS);\n  },\n  getById: async id => {\n    await delay();\n    const employers = getData(STORAGE_KEYS.EMPLOYERS);\n    return employers.find(employer => employer.id === parseInt(id));\n  },\n  create: async employerData => {\n    await delay();\n    const employers = getData(STORAGE_KEYS.EMPLOYERS);\n    const newEmployer = {\n      ...employerData,\n      id: Math.max(...employers.map(e => e.id), 0) + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    employers.push(newEmployer);\n    setData(STORAGE_KEYS.EMPLOYERS, employers);\n    return newEmployer;\n  },\n  update: async (id, employerData) => {\n    await delay();\n    const employers = getData(STORAGE_KEYS.EMPLOYERS);\n    const index = employers.findIndex(employer => employer.id === parseInt(id));\n    if (index !== -1) {\n      employers[index] = {\n        ...employers[index],\n        ...employerData,\n        updatedAt: new Date().toISOString()\n      };\n      setData(STORAGE_KEYS.EMPLOYERS, employers);\n      return employers[index];\n    }\n    throw new Error('Employer not found');\n  }\n};\n\n// Jobs API\nexport const jobsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.JOBS);\n  },\n  getById: async id => {\n    await delay();\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    return jobs.find(job => job.id === parseInt(id));\n  },\n  create: async jobData => {\n    await delay();\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    const newJob = {\n      ...jobData,\n      id: Math.max(...jobs.map(j => j.id), 0) + 1,\n      postedDate: new Date().toISOString(),\n      status: 'active',\n      applicationsReceived: 0\n    };\n    jobs.push(newJob);\n    setData(STORAGE_KEYS.JOBS, jobs);\n    return newJob;\n  },\n  update: async (id, jobData) => {\n    await delay();\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    const index = jobs.findIndex(job => job.id === parseInt(id));\n    if (index !== -1) {\n      jobs[index] = {\n        ...jobs[index],\n        ...jobData\n      };\n      setData(STORAGE_KEYS.JOBS, jobs);\n      return jobs[index];\n    }\n    throw new Error('Job not found');\n  },\n  getByFilters: async filters => {\n    await delay();\n    let jobs = getData(STORAGE_KEYS.JOBS);\n    if (filters.location) {\n      jobs = jobs.filter(job => job.location.toLowerCase().includes(filters.location.toLowerCase()));\n    }\n    if (filters.jobType) {\n      jobs = jobs.filter(job => job.jobType === filters.jobType);\n    }\n    if (filters.company) {\n      jobs = jobs.filter(job => job.company.toLowerCase().includes(filters.company.toLowerCase()));\n    }\n    return jobs;\n  }\n};\n\n// Applications API\nexport const applicationsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.APPLICATIONS);\n  },\n  getByStudentId: async studentId => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    return applications.filter(app => app.studentId === parseInt(studentId));\n  },\n  getByJobId: async jobId => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    return applications.filter(app => app.jobId === parseInt(jobId));\n  },\n  create: async applicationData => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    const newApplication = {\n      ...applicationData,\n      id: Math.max(...applications.map(a => a.id), 0) + 1,\n      applicationDate: new Date().toISOString(),\n      status: 'under_review'\n    };\n    applications.push(newApplication);\n    setData(STORAGE_KEYS.APPLICATIONS, applications);\n\n    // Update job applications count\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    const jobIndex = jobs.findIndex(job => job.id === applicationData.jobId);\n    if (jobIndex !== -1) {\n      jobs[jobIndex].applicationsReceived += 1;\n      setData(STORAGE_KEYS.JOBS, jobs);\n    }\n    return newApplication;\n  },\n  updateStatus: async (id, status, feedback = null) => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    const index = applications.findIndex(app => app.id === parseInt(id));\n    if (index !== -1) {\n      applications[index].status = status;\n      if (feedback) applications[index].feedback = feedback;\n      setData(STORAGE_KEYS.APPLICATIONS, applications);\n      return applications[index];\n    }\n    throw new Error('Application not found');\n  }\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.NOTIFICATIONS);\n  },\n  getByRecipient: async (recipient, recipientId = null) => {\n    await delay();\n    const notifications = getData(STORAGE_KEYS.NOTIFICATIONS);\n    return notifications.filter(notif => notif.recipient === recipient && (recipientId ? notif.recipientId === parseInt(recipientId) : true));\n  },\n  create: async notificationData => {\n    await delay();\n    const notifications = getData(STORAGE_KEYS.NOTIFICATIONS);\n    const newNotification = {\n      ...notificationData,\n      id: Math.max(...notifications.map(n => n.id), 0) + 1,\n      createdAt: new Date().toISOString(),\n      isRead: false\n    };\n    notifications.push(newNotification);\n    setData(STORAGE_KEYS.NOTIFICATIONS, notifications);\n    return newNotification;\n  },\n  markAsRead: async id => {\n    await delay();\n    const notifications = getData(STORAGE_KEYS.NOTIFICATIONS);\n    const index = notifications.findIndex(notif => notif.id === parseInt(id));\n    if (index !== -1) {\n      notifications[index].isRead = true;\n      setData(STORAGE_KEYS.NOTIFICATIONS, notifications);\n      return notifications[index];\n    }\n    throw new Error('Notification not found');\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  login: async (username, password) => {\n    await delay();\n    const admin = getData(STORAGE_KEYS.ADMIN_USER);\n    if (admin.username === username && admin.password === password) {\n      return {\n        success: true,\n        user: {\n          username: admin.username,\n          role: admin.role\n        }\n      };\n    }\n    return {\n      success: false,\n      message: 'Invalid credentials'\n    };\n  }\n};\n\n// Initialize data on module load\ninitializeData();","map":{"version":3,"names":["studentsData","employersData","jobsData","applicationsData","notificationsData","delay","ms","Promise","resolve","setTimeout","STORAGE_KEYS","STUDENTS","EMPLOYERS","JOBS","APPLICATIONS","NOTIFICATIONS","ADMIN_USER","initializeData","localStorage","getItem","setItem","JSON","stringify","username","password","role","getData","key","data","parse","setData","studentsAPI","getAll","getById","id","students","find","student","parseInt","create","studentData","newStudent","Math","max","map","s","createdAt","Date","toISOString","updatedAt","push","update","index","findIndex","Error","delete","filteredStudents","filter","employersAPI","employers","employer","employerData","newEmployer","e","jobsAPI","jobs","job","jobData","newJob","j","postedDate","status","applicationsReceived","getByFilters","filters","location","toLowerCase","includes","jobType","company","applicationsAPI","getByStudentId","studentId","applications","app","getByJobId","jobId","applicationData","newApplication","a","applicationDate","jobIndex","updateStatus","feedback","notificationsAPI","getByRecipient","recipient","recipientId","notifications","notif","notificationData","newNotification","n","isRead","markAsRead","adminAPI","login","admin","success","user","message"],"sources":["D:/jobsy/frontend/src/data/api.js"],"sourcesContent":["// Mock API simulation for frontend data operations\nimport studentsData from './students.json';\nimport employersData from './employers.json';\nimport jobsData from './jobs.json';\nimport applicationsData from './applications.json';\nimport notificationsData from './notifications.json';\n\n// Simulate API delay\nconst delay = (ms = 500) => new Promise(resolve => setTimeout(resolve, ms));\n\n// Local storage keys\nconst STORAGE_KEYS = {\n  STUDENTS: 'placement_students',\n  EMPLOYERS: 'placement_employers',\n  JOBS: 'placement_jobs',\n  APPLICATIONS: 'placement_applications',\n  NOTIFICATIONS: 'placement_notifications',\n  ADMIN_USER: 'placement_admin'\n};\n\n// Initialize local storage with mock data if not exists\nconst initializeData = () => {\n  if (!localStorage.getItem(STORAGE_KEYS.STUDENTS)) {\n    localStorage.setItem(STORAGE_KEYS.STUDENTS, JSON.stringify(studentsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.EMPLOYERS)) {\n    localStorage.setItem(STORAGE_KEYS.EMPLOYERS, JSON.stringify(employersData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.JOBS)) {\n    localStorage.setItem(STORAGE_KEYS.JOBS, JSON.stringify(jobsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.APPLICATIONS)) {\n    localStorage.setItem(STORAGE_KEYS.APPLICATIONS, JSON.stringify(applicationsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.NOTIFICATIONS)) {\n    localStorage.setItem(STORAGE_KEYS.NOTIFICATIONS, JSON.stringify(notificationsData));\n  }\n  if (!localStorage.getItem(STORAGE_KEYS.ADMIN_USER)) {\n    localStorage.setItem(STORAGE_KEYS.ADMIN_USER, JSON.stringify({\n      username: 'admin',\n      password: 'admin123',\n      role: 'admin'\n    }));\n  }\n};\n\n// Generic CRUD operations\nconst getData = (key) => {\n  const data = localStorage.getItem(key);\n  return data ? JSON.parse(data) : [];\n};\n\nconst setData = (key, data) => {\n  localStorage.setItem(key, JSON.stringify(data));\n};\n\n// Students API\nexport const studentsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.STUDENTS);\n  },\n  \n  getById: async (id) => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    return students.find(student => student.id === parseInt(id));\n  },\n  \n  create: async (studentData) => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    const newStudent = {\n      ...studentData,\n      id: Math.max(...students.map(s => s.id), 0) + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    students.push(newStudent);\n    setData(STORAGE_KEYS.STUDENTS, students);\n    return newStudent;\n  },\n  \n  update: async (id, studentData) => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    const index = students.findIndex(student => student.id === parseInt(id));\n    if (index !== -1) {\n      students[index] = {\n        ...students[index],\n        ...studentData,\n        updatedAt: new Date().toISOString()\n      };\n      setData(STORAGE_KEYS.STUDENTS, students);\n      return students[index];\n    }\n    throw new Error('Student not found');\n  },\n  \n  delete: async (id) => {\n    await delay();\n    const students = getData(STORAGE_KEYS.STUDENTS);\n    const filteredStudents = students.filter(student => student.id !== parseInt(id));\n    setData(STORAGE_KEYS.STUDENTS, filteredStudents);\n    return true;\n  }\n};\n\n// Employers API\nexport const employersAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.EMPLOYERS);\n  },\n  \n  getById: async (id) => {\n    await delay();\n    const employers = getData(STORAGE_KEYS.EMPLOYERS);\n    return employers.find(employer => employer.id === parseInt(id));\n  },\n  \n  create: async (employerData) => {\n    await delay();\n    const employers = getData(STORAGE_KEYS.EMPLOYERS);\n    const newEmployer = {\n      ...employerData,\n      id: Math.max(...employers.map(e => e.id), 0) + 1,\n      createdAt: new Date().toISOString(),\n      updatedAt: new Date().toISOString()\n    };\n    employers.push(newEmployer);\n    setData(STORAGE_KEYS.EMPLOYERS, employers);\n    return newEmployer;\n  },\n  \n  update: async (id, employerData) => {\n    await delay();\n    const employers = getData(STORAGE_KEYS.EMPLOYERS);\n    const index = employers.findIndex(employer => employer.id === parseInt(id));\n    if (index !== -1) {\n      employers[index] = {\n        ...employers[index],\n        ...employerData,\n        updatedAt: new Date().toISOString()\n      };\n      setData(STORAGE_KEYS.EMPLOYERS, employers);\n      return employers[index];\n    }\n    throw new Error('Employer not found');\n  }\n};\n\n// Jobs API\nexport const jobsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.JOBS);\n  },\n  \n  getById: async (id) => {\n    await delay();\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    return jobs.find(job => job.id === parseInt(id));\n  },\n  \n  create: async (jobData) => {\n    await delay();\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    const newJob = {\n      ...jobData,\n      id: Math.max(...jobs.map(j => j.id), 0) + 1,\n      postedDate: new Date().toISOString(),\n      status: 'active',\n      applicationsReceived: 0\n    };\n    jobs.push(newJob);\n    setData(STORAGE_KEYS.JOBS, jobs);\n    return newJob;\n  },\n  \n  update: async (id, jobData) => {\n    await delay();\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    const index = jobs.findIndex(job => job.id === parseInt(id));\n    if (index !== -1) {\n      jobs[index] = { ...jobs[index], ...jobData };\n      setData(STORAGE_KEYS.JOBS, jobs);\n      return jobs[index];\n    }\n    throw new Error('Job not found');\n  },\n  \n  getByFilters: async (filters) => {\n    await delay();\n    let jobs = getData(STORAGE_KEYS.JOBS);\n    \n    if (filters.location) {\n      jobs = jobs.filter(job => \n        job.location.toLowerCase().includes(filters.location.toLowerCase())\n      );\n    }\n    \n    if (filters.jobType) {\n      jobs = jobs.filter(job => job.jobType === filters.jobType);\n    }\n    \n    if (filters.company) {\n      jobs = jobs.filter(job => \n        job.company.toLowerCase().includes(filters.company.toLowerCase())\n      );\n    }\n    \n    return jobs;\n  }\n};\n\n// Applications API\nexport const applicationsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.APPLICATIONS);\n  },\n  \n  getByStudentId: async (studentId) => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    return applications.filter(app => app.studentId === parseInt(studentId));\n  },\n  \n  getByJobId: async (jobId) => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    return applications.filter(app => app.jobId === parseInt(jobId));\n  },\n  \n  create: async (applicationData) => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    const newApplication = {\n      ...applicationData,\n      id: Math.max(...applications.map(a => a.id), 0) + 1,\n      applicationDate: new Date().toISOString(),\n      status: 'under_review'\n    };\n    applications.push(newApplication);\n    setData(STORAGE_KEYS.APPLICATIONS, applications);\n    \n    // Update job applications count\n    const jobs = getData(STORAGE_KEYS.JOBS);\n    const jobIndex = jobs.findIndex(job => job.id === applicationData.jobId);\n    if (jobIndex !== -1) {\n      jobs[jobIndex].applicationsReceived += 1;\n      setData(STORAGE_KEYS.JOBS, jobs);\n    }\n    \n    return newApplication;\n  },\n  \n  updateStatus: async (id, status, feedback = null) => {\n    await delay();\n    const applications = getData(STORAGE_KEYS.APPLICATIONS);\n    const index = applications.findIndex(app => app.id === parseInt(id));\n    if (index !== -1) {\n      applications[index].status = status;\n      if (feedback) applications[index].feedback = feedback;\n      setData(STORAGE_KEYS.APPLICATIONS, applications);\n      return applications[index];\n    }\n    throw new Error('Application not found');\n  }\n};\n\n// Notifications API\nexport const notificationsAPI = {\n  getAll: async () => {\n    await delay();\n    return getData(STORAGE_KEYS.NOTIFICATIONS);\n  },\n  \n  getByRecipient: async (recipient, recipientId = null) => {\n    await delay();\n    const notifications = getData(STORAGE_KEYS.NOTIFICATIONS);\n    return notifications.filter(notif => \n      notif.recipient === recipient && \n      (recipientId ? notif.recipientId === parseInt(recipientId) : true)\n    );\n  },\n  \n  create: async (notificationData) => {\n    await delay();\n    const notifications = getData(STORAGE_KEYS.NOTIFICATIONS);\n    const newNotification = {\n      ...notificationData,\n      id: Math.max(...notifications.map(n => n.id), 0) + 1,\n      createdAt: new Date().toISOString(),\n      isRead: false\n    };\n    notifications.push(newNotification);\n    setData(STORAGE_KEYS.NOTIFICATIONS, notifications);\n    return newNotification;\n  },\n  \n  markAsRead: async (id) => {\n    await delay();\n    const notifications = getData(STORAGE_KEYS.NOTIFICATIONS);\n    const index = notifications.findIndex(notif => notif.id === parseInt(id));\n    if (index !== -1) {\n      notifications[index].isRead = true;\n      setData(STORAGE_KEYS.NOTIFICATIONS, notifications);\n      return notifications[index];\n    }\n    throw new Error('Notification not found');\n  }\n};\n\n// Admin API\nexport const adminAPI = {\n  login: async (username, password) => {\n    await delay();\n    const admin = getData(STORAGE_KEYS.ADMIN_USER);\n    if (admin.username === username && admin.password === password) {\n      return { success: true, user: { username: admin.username, role: admin.role } };\n    }\n    return { success: false, message: 'Invalid credentials' };\n  }\n};\n\n// Initialize data on module load\ninitializeData();\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}