{"ast":null,"code":"import _objectSpread from\"D:/jobsy/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{jobsAPI,studentsAPI,applicationsAPI}from'../data/api';import{StudentService}from'./studentService';export class JobService{// Get all jobs\nstatic async getAllJobs(){try{return await jobsAPI.getAll();}catch(error){throw new Error('Failed to fetch jobs: '+error.message);}}// Get job by ID\nstatic async getJobById(id){try{return await jobsAPI.getById(id);}catch(error){throw new Error('Failed to fetch job: '+error.message);}}// Get active jobs only\nstatic async getActiveJobs(){try{const allJobs=await jobsAPI.getAll();return allJobs.filter(job=>job.status==='active'&&new Date(job.applicationDeadline)>new Date());}catch(error){throw new Error('Failed to fetch active jobs: '+error.message);}}// Search and filter jobs\nstatic async searchJobs(){let filters=arguments.length>0&&arguments[0]!==undefined?arguments[0]:{};try{let jobs=await jobsAPI.getAll();// Filter by location\nif(filters.location){jobs=jobs.filter(job=>job.location.toLowerCase().includes(filters.location.toLowerCase()));}// Filter by job type\nif(filters.jobType){jobs=jobs.filter(job=>job.jobType===filters.jobType);}// Filter by company\nif(filters.company){jobs=jobs.filter(job=>job.company.toLowerCase().includes(filters.company.toLowerCase()));}// Filter by experience level\nif(filters.experience){jobs=jobs.filter(job=>job.experience.toLowerCase().includes(filters.experience.toLowerCase()));}// Filter by salary range (basic implementation)\nif(filters.minSalary){jobs=jobs.filter(job=>{const salaryMatch=job.salary.match(/\\$(\\d+,?\\d*)/);if(salaryMatch){const jobMinSalary=parseInt(salaryMatch[1].replace(',',''));return jobMinSalary>=filters.minSalary;}return true;});}// Filter by skills\nif(filters.skills&&filters.skills.length>0){jobs=jobs.filter(job=>job.skills&&job.skills.some(skill=>filters.skills.some(filterSkill=>skill.toLowerCase().includes(filterSkill.toLowerCase()))));}// Filter by department eligibility\nif(filters.department){jobs=jobs.filter(job=>job.eligibilityCriteria&&job.eligibilityCriteria.departments&&job.eligibilityCriteria.departments.includes(filters.department));}// Sort by posted date (newest first)\njobs.sort((a,b)=>new Date(b.postedDate)-new Date(a.postedDate));return jobs;}catch(error){throw new Error('Failed to search jobs: '+error.message);}}// Get jobs suitable for a specific student\nstatic async getJobsForStudent(studentId){try{const student=await studentsAPI.getById(studentId);if(!student){throw new Error('Student not found');}const allJobs=await this.getActiveJobs();return allJobs.filter(job=>{// Check basic eligibility\nif(!student.isEligible)return false;// Check if already applied\nif(student.appliedJobs&&student.appliedJobs.includes(job.id))return false;// Check job eligibility criteria\nif(job.eligibilityCriteria){// Check CGPA\nif(job.eligibilityCriteria.minCGPA&&student.cgpa<job.eligibilityCriteria.minCGPA){return false;}// Check department\nif(job.eligibilityCriteria.departments&&!job.eligibilityCriteria.departments.includes(student.department)){return false;}// Check year\nif(job.eligibilityCriteria.year&&student.year<job.eligibilityCriteria.year){return false;}}return true;});}catch(error){throw new Error('Failed to get jobs for student: '+error.message);}}// Get job statistics\nstatic async getJobStatistics(){try{const jobs=await jobsAPI.getAll();const applications=await applicationsAPI.getAll();const stats={total:jobs.length,active:jobs.filter(job=>job.status==='active').length,expired:jobs.filter(job=>new Date(job.applicationDeadline)<new Date()).length,byType:{'Full-time':jobs.filter(job=>job.jobType==='Full-time').length,'Part-time':jobs.filter(job=>job.jobType==='Part-time').length,'Internship':jobs.filter(job=>job.jobType==='Internship').length,'Contract':jobs.filter(job=>job.jobType==='Contract').length},byLocation:this.groupJobsByLocation(jobs),totalApplications:applications.length,averageApplicationsPerJob:jobs.length>0?Math.round(applications.length/jobs.length):0,mostPopularJobs:this.getMostPopularJobs(jobs,applications)};return stats;}catch(error){throw new Error('Failed to get job statistics: '+error.message);}}// Group jobs by location for analytics\nstatic groupJobsByLocation(jobs){const locationGroups={};jobs.forEach(job=>{const location=job.location;if(!locationGroups[location]){locationGroups[location]=0;}locationGroups[location]++;});return locationGroups;}// Get most popular jobs based on applications\nstatic getMostPopularJobs(jobs,applications){const jobApplicationCounts={};applications.forEach(app=>{if(!jobApplicationCounts[app.jobId]){jobApplicationCounts[app.jobId]=0;}jobApplicationCounts[app.jobId]++;});return jobs.map(job=>_objectSpread(_objectSpread({},job),{},{applicationCount:jobApplicationCounts[job.id]||0})).sort((a,b)=>b.applicationCount-a.applicationCount).slice(0,5);}// Check if application deadline is approaching\nstatic isDeadlineApproaching(job){let daysThreshold=arguments.length>1&&arguments[1]!==undefined?arguments[1]:3;const deadline=new Date(job.applicationDeadline);const now=new Date();const diffTime=deadline-now;const diffDays=Math.ceil(diffTime/(1000*60*60*24));return diffDays<=daysThreshold&&diffDays>0;}// Get recommended jobs based on student profile\nstatic async getRecommendedJobs(studentId){let limit=arguments.length>1&&arguments[1]!==undefined?arguments[1]:5;try{const student=await studentsAPI.getById(studentId);if(!student){throw new Error('Student not found');}const suitableJobs=await this.getJobsForStudent(studentId);// Score jobs based on student profile\nconst scoredJobs=suitableJobs.map(job=>{let score=0;// Score based on skill match\nif(job.skills&&student.skills){const matchingSkills=job.skills.filter(skill=>student.skills.some(studentSkill=>studentSkill.toLowerCase().includes(skill.toLowerCase())));score+=matchingSkills.length*10;}// Score based on department match\nif(job.eligibilityCriteria&&job.eligibilityCriteria.departments&&job.eligibilityCriteria.departments.includes(student.department)){score+=20;}// Score based on CGPA (higher CGPA gets bonus for competitive jobs)\nif(job.eligibilityCriteria&&job.eligibilityCriteria.minCGPA){const cgpaBonus=Math.max(0,student.cgpa-job.eligibilityCriteria.minCGPA)*5;score+=cgpaBonus;}// Bonus for newer jobs\nconst daysSincePosted=(new Date()-new Date(job.postedDate))/(1000*60*60*24);if(daysSincePosted<7){score+=15;}return _objectSpread(_objectSpread({},job),{},{recommendationScore:score});});// Sort by score and return top recommendations\nreturn scoredJobs.sort((a,b)=>b.recommendationScore-a.recommendationScore).slice(0,limit);}catch(error){throw new Error('Failed to get recommended jobs: '+error.message);}}// Get job details with additional information\nstatic async getJobDetails(jobId){try{const job=await jobsAPI.getById(jobId);if(!job){throw new Error('Job not found');}const applications=await applicationsAPI.getByJobId(jobId);const eligibleStudents=await StudentService.getEligibleStudentsForJob(job.eligibilityCriteria);return{job,applicationCount:applications.length,eligibleStudentCount:eligibleStudents.length,applications:applications.slice(0,10),// Recent applications\nisDeadlineApproaching:this.isDeadlineApproaching(job),daysUntilDeadline:Math.ceil((new Date(job.applicationDeadline)-new Date())/(1000*60*60*24))};}catch(error){throw new Error('Failed to get job details: '+error.message);}}}","map":{"version":3,"names":["jobsAPI","studentsAPI","applicationsAPI","StudentService","JobService","getAllJobs","getAll","error","Error","message","getJobById","id","getById","getActiveJobs","allJobs","filter","job","status","Date","applicationDeadline","searchJobs","filters","arguments","length","undefined","jobs","location","toLowerCase","includes","jobType","company","experience","minSalary","salaryMatch","salary","match","jobMinSalary","parseInt","replace","skills","some","skill","filterSkill","department","eligibilityCriteria","departments","sort","a","b","postedDate","getJobsForStudent","studentId","student","isEligible","appliedJobs","minCGPA","cgpa","year","getJobStatistics","applications","stats","total","active","expired","byType","byLocation","groupJobsByLocation","totalApplications","averageApplicationsPerJob","Math","round","mostPopularJobs","getMostPopularJobs","locationGroups","forEach","jobApplicationCounts","app","jobId","map","_objectSpread","applicationCount","slice","isDeadlineApproaching","daysThreshold","deadline","now","diffTime","diffDays","ceil","getRecommendedJobs","limit","suitableJobs","scoredJobs","score","matchingSkills","studentSkill","cgpaBonus","max","daysSincePosted","recommendationScore","getJobDetails","getByJobId","eligibleStudents","getEligibleStudentsForJob","eligibleStudentCount","daysUntilDeadline"],"sources":["D:/jobsy/frontend/src/domain/jobService.js"],"sourcesContent":["import { jobsAPI, studentsAPI, applicationsAPI } from '../data/api';\nimport { StudentService } from './studentService';\n\nexport class JobService {\n  // Get all jobs\n  static async getAllJobs() {\n    try {\n      return await jobsAPI.getAll();\n    } catch (error) {\n      throw new Error('Failed to fetch jobs: ' + error.message);\n    }\n  }\n\n  // Get job by ID\n  static async getJobById(id) {\n    try {\n      return await jobsAPI.getById(id);\n    } catch (error) {\n      throw new Error('Failed to fetch job: ' + error.message);\n    }\n  }\n\n  // Get active jobs only\n  static async getActiveJobs() {\n    try {\n      const allJobs = await jobsAPI.getAll();\n      return allJobs.filter(job => \n        job.status === 'active' && \n        new Date(job.applicationDeadline) > new Date()\n      );\n    } catch (error) {\n      throw new Error('Failed to fetch active jobs: ' + error.message);\n    }\n  }\n\n  // Search and filter jobs\n  static async searchJobs(filters = {}) {\n    try {\n      let jobs = await jobsAPI.getAll();\n\n      // Filter by location\n      if (filters.location) {\n        jobs = jobs.filter(job => \n          job.location.toLowerCase().includes(filters.location.toLowerCase())\n        );\n      }\n\n      // Filter by job type\n      if (filters.jobType) {\n        jobs = jobs.filter(job => job.jobType === filters.jobType);\n      }\n\n      // Filter by company\n      if (filters.company) {\n        jobs = jobs.filter(job => \n          job.company.toLowerCase().includes(filters.company.toLowerCase())\n        );\n      }\n\n      // Filter by experience level\n      if (filters.experience) {\n        jobs = jobs.filter(job => \n          job.experience.toLowerCase().includes(filters.experience.toLowerCase())\n        );\n      }\n\n      // Filter by salary range (basic implementation)\n      if (filters.minSalary) {\n        jobs = jobs.filter(job => {\n          const salaryMatch = job.salary.match(/\\$(\\d+,?\\d*)/);\n          if (salaryMatch) {\n            const jobMinSalary = parseInt(salaryMatch[1].replace(',', ''));\n            return jobMinSalary >= filters.minSalary;\n          }\n          return true;\n        });\n      }\n\n      // Filter by skills\n      if (filters.skills && filters.skills.length > 0) {\n        jobs = jobs.filter(job => \n          job.skills && job.skills.some(skill => \n            filters.skills.some(filterSkill => \n              skill.toLowerCase().includes(filterSkill.toLowerCase())\n            )\n          )\n        );\n      }\n\n      // Filter by department eligibility\n      if (filters.department) {\n        jobs = jobs.filter(job => \n          job.eligibilityCriteria && \n          job.eligibilityCriteria.departments &&\n          job.eligibilityCriteria.departments.includes(filters.department)\n        );\n      }\n\n      // Sort by posted date (newest first)\n      jobs.sort((a, b) => new Date(b.postedDate) - new Date(a.postedDate));\n\n      return jobs;\n    } catch (error) {\n      throw new Error('Failed to search jobs: ' + error.message);\n    }\n  }\n\n  // Get jobs suitable for a specific student\n  static async getJobsForStudent(studentId) {\n    try {\n      const student = await studentsAPI.getById(studentId);\n      if (!student) {\n        throw new Error('Student not found');\n      }\n\n      const allJobs = await this.getActiveJobs();\n      \n      return allJobs.filter(job => {\n        // Check basic eligibility\n        if (!student.isEligible) return false;\n\n        // Check if already applied\n        if (student.appliedJobs && student.appliedJobs.includes(job.id)) return false;\n\n        // Check job eligibility criteria\n        if (job.eligibilityCriteria) {\n          // Check CGPA\n          if (job.eligibilityCriteria.minCGPA && student.cgpa < job.eligibilityCriteria.minCGPA) {\n            return false;\n          }\n\n          // Check department\n          if (job.eligibilityCriteria.departments && \n              !job.eligibilityCriteria.departments.includes(student.department)) {\n            return false;\n          }\n\n          // Check year\n          if (job.eligibilityCriteria.year && student.year < job.eligibilityCriteria.year) {\n            return false;\n          }\n        }\n\n        return true;\n      });\n    } catch (error) {\n      throw new Error('Failed to get jobs for student: ' + error.message);\n    }\n  }\n\n  // Get job statistics\n  static async getJobStatistics() {\n    try {\n      const jobs = await jobsAPI.getAll();\n      const applications = await applicationsAPI.getAll();\n\n      const stats = {\n        total: jobs.length,\n        active: jobs.filter(job => job.status === 'active').length,\n        expired: jobs.filter(job => new Date(job.applicationDeadline) < new Date()).length,\n        byType: {\n          'Full-time': jobs.filter(job => job.jobType === 'Full-time').length,\n          'Part-time': jobs.filter(job => job.jobType === 'Part-time').length,\n          'Internship': jobs.filter(job => job.jobType === 'Internship').length,\n          'Contract': jobs.filter(job => job.jobType === 'Contract').length\n        },\n        byLocation: this.groupJobsByLocation(jobs),\n        totalApplications: applications.length,\n        averageApplicationsPerJob: jobs.length > 0 ? Math.round(applications.length / jobs.length) : 0,\n        mostPopularJobs: this.getMostPopularJobs(jobs, applications)\n      };\n\n      return stats;\n    } catch (error) {\n      throw new Error('Failed to get job statistics: ' + error.message);\n    }\n  }\n\n  // Group jobs by location for analytics\n  static groupJobsByLocation(jobs) {\n    const locationGroups = {};\n    \n    jobs.forEach(job => {\n      const location = job.location;\n      if (!locationGroups[location]) {\n        locationGroups[location] = 0;\n      }\n      locationGroups[location]++;\n    });\n\n    return locationGroups;\n  }\n\n  // Get most popular jobs based on applications\n  static getMostPopularJobs(jobs, applications) {\n    const jobApplicationCounts = {};\n    \n    applications.forEach(app => {\n      if (!jobApplicationCounts[app.jobId]) {\n        jobApplicationCounts[app.jobId] = 0;\n      }\n      jobApplicationCounts[app.jobId]++;\n    });\n\n    return jobs\n      .map(job => ({\n        ...job,\n        applicationCount: jobApplicationCounts[job.id] || 0\n      }))\n      .sort((a, b) => b.applicationCount - a.applicationCount)\n      .slice(0, 5);\n  }\n\n  // Check if application deadline is approaching\n  static isDeadlineApproaching(job, daysThreshold = 3) {\n    const deadline = new Date(job.applicationDeadline);\n    const now = new Date();\n    const diffTime = deadline - now;\n    const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));\n    \n    return diffDays <= daysThreshold && diffDays > 0;\n  }\n\n  // Get recommended jobs based on student profile\n  static async getRecommendedJobs(studentId, limit = 5) {\n    try {\n      const student = await studentsAPI.getById(studentId);\n      if (!student) {\n        throw new Error('Student not found');\n      }\n\n      const suitableJobs = await this.getJobsForStudent(studentId);\n      \n      // Score jobs based on student profile\n      const scoredJobs = suitableJobs.map(job => {\n        let score = 0;\n        \n        // Score based on skill match\n        if (job.skills && student.skills) {\n          const matchingSkills = job.skills.filter(skill => \n            student.skills.some(studentSkill => \n              studentSkill.toLowerCase().includes(skill.toLowerCase())\n            )\n          );\n          score += matchingSkills.length * 10;\n        }\n\n        // Score based on department match\n        if (job.eligibilityCriteria && \n            job.eligibilityCriteria.departments &&\n            job.eligibilityCriteria.departments.includes(student.department)) {\n          score += 20;\n        }\n\n        // Score based on CGPA (higher CGPA gets bonus for competitive jobs)\n        if (job.eligibilityCriteria && job.eligibilityCriteria.minCGPA) {\n          const cgpaBonus = Math.max(0, student.cgpa - job.eligibilityCriteria.minCGPA) * 5;\n          score += cgpaBonus;\n        }\n\n        // Bonus for newer jobs\n        const daysSincePosted = (new Date() - new Date(job.postedDate)) / (1000 * 60 * 60 * 24);\n        if (daysSincePosted < 7) {\n          score += 15;\n        }\n\n        return { ...job, recommendationScore: score };\n      });\n\n      // Sort by score and return top recommendations\n      return scoredJobs\n        .sort((a, b) => b.recommendationScore - a.recommendationScore)\n        .slice(0, limit);\n    } catch (error) {\n      throw new Error('Failed to get recommended jobs: ' + error.message);\n    }\n  }\n\n  // Get job details with additional information\n  static async getJobDetails(jobId) {\n    try {\n      const job = await jobsAPI.getById(jobId);\n      if (!job) {\n        throw new Error('Job not found');\n      }\n\n      const applications = await applicationsAPI.getByJobId(jobId);\n      const eligibleStudents = await StudentService.getEligibleStudentsForJob(job.eligibilityCriteria);\n\n      return {\n        job,\n        applicationCount: applications.length,\n        eligibleStudentCount: eligibleStudents.length,\n        applications: applications.slice(0, 10), // Recent applications\n        isDeadlineApproaching: this.isDeadlineApproaching(job),\n        daysUntilDeadline: Math.ceil((new Date(job.applicationDeadline) - new Date()) / (1000 * 60 * 60 * 24))\n      };\n    } catch (error) {\n      throw new Error('Failed to get job details: ' + error.message);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}