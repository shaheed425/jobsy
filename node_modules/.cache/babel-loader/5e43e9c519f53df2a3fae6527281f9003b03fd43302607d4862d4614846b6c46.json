{"ast":null,"code":"import { studentsAPI, applicationsAPI, notificationsAPI } from '../data/api';\nexport class StudentService {\n  // Get all students\n  static async getAllStudents() {\n    try {\n      return await studentsAPI.getAll();\n    } catch (error) {\n      throw new Error('Failed to fetch students: ' + error.message);\n    }\n  }\n\n  // Get student by ID\n  static async getStudentById(id) {\n    try {\n      return await studentsAPI.getById(id);\n    } catch (error) {\n      throw new Error('Failed to fetch student: ' + error.message);\n    }\n  }\n\n  // Register new student\n  static async registerStudent(studentData) {\n    try {\n      // Validate required fields\n      this.validateStudentData(studentData);\n\n      // Check eligibility\n      const isEligible = this.checkEligibility(studentData);\n      const newStudent = await studentsAPI.create({\n        ...studentData,\n        isEligible,\n        appliedJobs: []\n      });\n\n      // Create welcome notification\n      await notificationsAPI.create({\n        type: 'profile_created',\n        title: 'Welcome to Placement Portal',\n        message: 'Your student profile has been created successfully. Complete your profile to apply for jobs.',\n        recipient: 'student',\n        recipientId: newStudent.id,\n        priority: 'medium'\n      });\n      return newStudent;\n    } catch (error) {\n      throw new Error('Failed to register student: ' + error.message);\n    }\n  }\n\n  // Update student profile\n  static async updateStudentProfile(id, updateData) {\n    try {\n      // Check eligibility after update\n      const updatedData = {\n        ...updateData,\n        isEligible: this.checkEligibility(updateData)\n      };\n      return await studentsAPI.update(id, updatedData);\n    } catch (error) {\n      throw new Error('Failed to update student profile: ' + error.message);\n    }\n  }\n\n  // Get student applications\n  static async getStudentApplications(studentId) {\n    try {\n      return await applicationsAPI.getByStudentId(studentId);\n    } catch (error) {\n      throw new Error('Failed to fetch student applications: ' + error.message);\n    }\n  }\n\n  // Check if student is eligible for placements\n  static checkEligibility(studentData) {\n    const minCGPA = 7.0;\n    const requiredYear = 4;\n    return studentData.cgpa >= minCGPA && studentData.year >= requiredYear;\n  }\n\n  // Validate student data\n  static validateStudentData(studentData) {\n    const requiredFields = ['name', 'email', 'phone', 'department', 'year', 'cgpa'];\n    for (const field of requiredFields) {\n      if (!studentData[field]) {\n        throw new Error(`${field} is required`);\n      }\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(studentData.email)) {\n      throw new Error('Invalid email format');\n    }\n\n    // Validate CGPA range\n    if (studentData.cgpa < 0 || studentData.cgpa > 10) {\n      throw new Error('CGPA must be between 0 and 10');\n    }\n\n    // Validate year\n    if (studentData.year < 1 || studentData.year > 4) {\n      throw new Error('Year must be between 1 and 4');\n    }\n  }\n\n  // Get eligible students for a job\n  static async getEligibleStudentsForJob(jobCriteria) {\n    try {\n      const allStudents = await studentsAPI.getAll();\n      return allStudents.filter(student => {\n        // Check basic eligibility\n        if (!student.isEligible) return false;\n\n        // Check CGPA requirement\n        if (student.cgpa < jobCriteria.minCGPA) return false;\n\n        // Check department requirement\n        if (!jobCriteria.departments.includes(student.department)) return false;\n\n        // Check year requirement\n        if (student.year < jobCriteria.year) return false;\n        return true;\n      });\n    } catch (error) {\n      throw new Error('Failed to get eligible students: ' + error.message);\n    }\n  }\n\n  // Generate student report\n  static async generateStudentReport(studentId) {\n    try {\n      const student = await studentsAPI.getById(studentId);\n      const applications = await applicationsAPI.getByStudentId(studentId);\n      const report = {\n        student,\n        totalApplications: applications.length,\n        applicationsByStatus: {\n          under_review: applications.filter(app => app.status === 'under_review').length,\n          shortlisted: applications.filter(app => app.status === 'shortlisted').length,\n          accepted: applications.filter(app => app.status === 'accepted').length,\n          rejected: applications.filter(app => app.status === 'rejected').length\n        },\n        recentApplications: applications.slice(-5),\n        eligibilityStatus: student.isEligible ? 'Eligible' : 'Not Eligible'\n      };\n      return report;\n    } catch (error) {\n      throw new Error('Failed to generate student report: ' + error.message);\n    }\n  }\n}","map":{"version":3,"names":["studentsAPI","applicationsAPI","notificationsAPI","StudentService","getAllStudents","getAll","error","Error","message","getStudentById","id","getById","registerStudent","studentData","validateStudentData","isEligible","checkEligibility","newStudent","create","appliedJobs","type","title","recipient","recipientId","priority","updateStudentProfile","updateData","updatedData","update","getStudentApplications","studentId","getByStudentId","minCGPA","requiredYear","cgpa","year","requiredFields","field","emailRegex","test","email","getEligibleStudentsForJob","jobCriteria","allStudents","filter","student","departments","includes","department","generateStudentReport","applications","report","totalApplications","length","applicationsByStatus","under_review","app","status","shortlisted","accepted","rejected","recentApplications","slice","eligibilityStatus"],"sources":["D:/jobsy/frontend/src/domain/studentService.js"],"sourcesContent":["import { studentsAPI, applicationsAPI, notificationsAPI } from '../data/api';\n\nexport class StudentService {\n  // Get all students\n  static async getAllStudents() {\n    try {\n      return await studentsAPI.getAll();\n    } catch (error) {\n      throw new Error('Failed to fetch students: ' + error.message);\n    }\n  }\n\n  // Get student by ID\n  static async getStudentById(id) {\n    try {\n      return await studentsAPI.getById(id);\n    } catch (error) {\n      throw new Error('Failed to fetch student: ' + error.message);\n    }\n  }\n\n  // Register new student\n  static async registerStudent(studentData) {\n    try {\n      // Validate required fields\n      this.validateStudentData(studentData);\n      \n      // Check eligibility\n      const isEligible = this.checkEligibility(studentData);\n      \n      const newStudent = await studentsAPI.create({\n        ...studentData,\n        isEligible,\n        appliedJobs: []\n      });\n\n      // Create welcome notification\n      await notificationsAPI.create({\n        type: 'profile_created',\n        title: 'Welcome to Placement Portal',\n        message: 'Your student profile has been created successfully. Complete your profile to apply for jobs.',\n        recipient: 'student',\n        recipientId: newStudent.id,\n        priority: 'medium'\n      });\n\n      return newStudent;\n    } catch (error) {\n      throw new Error('Failed to register student: ' + error.message);\n    }\n  }\n\n  // Update student profile\n  static async updateStudentProfile(id, updateData) {\n    try {\n      // Check eligibility after update\n      const updatedData = {\n        ...updateData,\n        isEligible: this.checkEligibility(updateData)\n      };\n\n      return await studentsAPI.update(id, updatedData);\n    } catch (error) {\n      throw new Error('Failed to update student profile: ' + error.message);\n    }\n  }\n\n  // Get student applications\n  static async getStudentApplications(studentId) {\n    try {\n      return await applicationsAPI.getByStudentId(studentId);\n    } catch (error) {\n      throw new Error('Failed to fetch student applications: ' + error.message);\n    }\n  }\n\n  // Check if student is eligible for placements\n  static checkEligibility(studentData) {\n    const minCGPA = 7.0;\n    const requiredYear = 4;\n    \n    return studentData.cgpa >= minCGPA && studentData.year >= requiredYear;\n  }\n\n  // Validate student data\n  static validateStudentData(studentData) {\n    const requiredFields = ['name', 'email', 'phone', 'department', 'year', 'cgpa'];\n    \n    for (const field of requiredFields) {\n      if (!studentData[field]) {\n        throw new Error(`${field} is required`);\n      }\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(studentData.email)) {\n      throw new Error('Invalid email format');\n    }\n\n    // Validate CGPA range\n    if (studentData.cgpa < 0 || studentData.cgpa > 10) {\n      throw new Error('CGPA must be between 0 and 10');\n    }\n\n    // Validate year\n    if (studentData.year < 1 || studentData.year > 4) {\n      throw new Error('Year must be between 1 and 4');\n    }\n  }\n\n  // Get eligible students for a job\n  static async getEligibleStudentsForJob(jobCriteria) {\n    try {\n      const allStudents = await studentsAPI.getAll();\n      \n      return allStudents.filter(student => {\n        // Check basic eligibility\n        if (!student.isEligible) return false;\n        \n        // Check CGPA requirement\n        if (student.cgpa < jobCriteria.minCGPA) return false;\n        \n        // Check department requirement\n        if (!jobCriteria.departments.includes(student.department)) return false;\n        \n        // Check year requirement\n        if (student.year < jobCriteria.year) return false;\n        \n        return true;\n      });\n    } catch (error) {\n      throw new Error('Failed to get eligible students: ' + error.message);\n    }\n  }\n\n  // Generate student report\n  static async generateStudentReport(studentId) {\n    try {\n      const student = await studentsAPI.getById(studentId);\n      const applications = await applicationsAPI.getByStudentId(studentId);\n      \n      const report = {\n        student,\n        totalApplications: applications.length,\n        applicationsByStatus: {\n          under_review: applications.filter(app => app.status === 'under_review').length,\n          shortlisted: applications.filter(app => app.status === 'shortlisted').length,\n          accepted: applications.filter(app => app.status === 'accepted').length,\n          rejected: applications.filter(app => app.status === 'rejected').length\n        },\n        recentApplications: applications.slice(-5),\n        eligibilityStatus: student.isEligible ? 'Eligible' : 'Not Eligible'\n      };\n\n      return report;\n    } catch (error) {\n      throw new Error('Failed to generate student report: ' + error.message);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}