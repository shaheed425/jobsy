{"ast":null,"code":"import _objectSpread from\"D:/jobsy/frontend/node_modules/@babel/runtime/helpers/esm/objectSpread2.js\";import{studentsAPI,applicationsAPI,notificationsAPI}from'../data/api';export class StudentService{// Get all students\nstatic async getAllStudents(){try{return await studentsAPI.getAll();}catch(error){throw new Error('Failed to fetch students: '+error.message);}}// Get student by ID\nstatic async getStudentById(id){try{return await studentsAPI.getById(id);}catch(error){throw new Error('Failed to fetch student: '+error.message);}}// Register new student\nstatic async registerStudent(studentData){try{// Validate required fields\nthis.validateStudentData(studentData);// Check eligibility\nconst isEligible=this.checkEligibility(studentData);const newStudent=await studentsAPI.create(_objectSpread(_objectSpread({},studentData),{},{isEligible,appliedJobs:[]}));// Create welcome notification\nawait notificationsAPI.create({type:'profile_created',title:'Welcome to Placement Portal',message:'Your student profile has been created successfully. Complete your profile to apply for jobs.',recipient:'student',recipientId:newStudent.id,priority:'medium'});return newStudent;}catch(error){throw new Error('Failed to register student: '+error.message);}}// Update student profile\nstatic async updateStudentProfile(id,updateData){try{// Check eligibility after update\nconst updatedData=_objectSpread(_objectSpread({},updateData),{},{isEligible:this.checkEligibility(updateData)});return await studentsAPI.update(id,updatedData);}catch(error){throw new Error('Failed to update student profile: '+error.message);}}// Get student applications\nstatic async getStudentApplications(studentId){try{return await applicationsAPI.getByStudentId(studentId);}catch(error){throw new Error('Failed to fetch student applications: '+error.message);}}// Check if student is eligible for placements\nstatic checkEligibility(studentData){const minCGPA=7.0;const requiredYear=4;return studentData.cgpa>=minCGPA&&studentData.year>=requiredYear;}// Validate student data\nstatic validateStudentData(studentData){const requiredFields=['name','email','phone','department','year','cgpa'];for(const field of requiredFields){if(!studentData[field]){throw new Error(\"\".concat(field,\" is required\"));}}// Validate email format\nconst emailRegex=/^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;if(!emailRegex.test(studentData.email)){throw new Error('Invalid email format');}// Validate CGPA range\nif(studentData.cgpa<0||studentData.cgpa>10){throw new Error('CGPA must be between 0 and 10');}// Validate year\nif(studentData.year<1||studentData.year>4){throw new Error('Year must be between 1 and 4');}}// Get eligible students for a job\nstatic async getEligibleStudentsForJob(jobCriteria){try{const allStudents=await studentsAPI.getAll();return allStudents.filter(student=>{// Check basic eligibility\nif(!student.isEligible)return false;// Check CGPA requirement\nif(student.cgpa<jobCriteria.minCGPA)return false;// Check department requirement\nif(!jobCriteria.departments.includes(student.department))return false;// Check year requirement\nif(student.year<jobCriteria.year)return false;return true;});}catch(error){throw new Error('Failed to get eligible students: '+error.message);}}// Generate student report\nstatic async generateStudentReport(studentId){try{const student=await studentsAPI.getById(studentId);const applications=await applicationsAPI.getByStudentId(studentId);const report={student,totalApplications:applications.length,applicationsByStatus:{under_review:applications.filter(app=>app.status==='under_review').length,shortlisted:applications.filter(app=>app.status==='shortlisted').length,accepted:applications.filter(app=>app.status==='accepted').length,rejected:applications.filter(app=>app.status==='rejected').length},recentApplications:applications.slice(-5),eligibilityStatus:student.isEligible?'Eligible':'Not Eligible'};return report;}catch(error){throw new Error('Failed to generate student report: '+error.message);}}}","map":{"version":3,"names":["studentsAPI","applicationsAPI","notificationsAPI","StudentService","getAllStudents","getAll","error","Error","message","getStudentById","id","getById","registerStudent","studentData","validateStudentData","isEligible","checkEligibility","newStudent","create","_objectSpread","appliedJobs","type","title","recipient","recipientId","priority","updateStudentProfile","updateData","updatedData","update","getStudentApplications","studentId","getByStudentId","minCGPA","requiredYear","cgpa","year","requiredFields","field","concat","emailRegex","test","email","getEligibleStudentsForJob","jobCriteria","allStudents","filter","student","departments","includes","department","generateStudentReport","applications","report","totalApplications","length","applicationsByStatus","under_review","app","status","shortlisted","accepted","rejected","recentApplications","slice","eligibilityStatus"],"sources":["D:/jobsy/frontend/src/domain/studentService.js"],"sourcesContent":["import { studentsAPI, applicationsAPI, notificationsAPI } from '../data/api';\n\nexport class StudentService {\n  // Get all students\n  static async getAllStudents() {\n    try {\n      return await studentsAPI.getAll();\n    } catch (error) {\n      throw new Error('Failed to fetch students: ' + error.message);\n    }\n  }\n\n  // Get student by ID\n  static async getStudentById(id) {\n    try {\n      return await studentsAPI.getById(id);\n    } catch (error) {\n      throw new Error('Failed to fetch student: ' + error.message);\n    }\n  }\n\n  // Register new student\n  static async registerStudent(studentData) {\n    try {\n      // Validate required fields\n      this.validateStudentData(studentData);\n      \n      // Check eligibility\n      const isEligible = this.checkEligibility(studentData);\n      \n      const newStudent = await studentsAPI.create({\n        ...studentData,\n        isEligible,\n        appliedJobs: []\n      });\n\n      // Create welcome notification\n      await notificationsAPI.create({\n        type: 'profile_created',\n        title: 'Welcome to Placement Portal',\n        message: 'Your student profile has been created successfully. Complete your profile to apply for jobs.',\n        recipient: 'student',\n        recipientId: newStudent.id,\n        priority: 'medium'\n      });\n\n      return newStudent;\n    } catch (error) {\n      throw new Error('Failed to register student: ' + error.message);\n    }\n  }\n\n  // Update student profile\n  static async updateStudentProfile(id, updateData) {\n    try {\n      // Check eligibility after update\n      const updatedData = {\n        ...updateData,\n        isEligible: this.checkEligibility(updateData)\n      };\n\n      return await studentsAPI.update(id, updatedData);\n    } catch (error) {\n      throw new Error('Failed to update student profile: ' + error.message);\n    }\n  }\n\n  // Get student applications\n  static async getStudentApplications(studentId) {\n    try {\n      return await applicationsAPI.getByStudentId(studentId);\n    } catch (error) {\n      throw new Error('Failed to fetch student applications: ' + error.message);\n    }\n  }\n\n  // Check if student is eligible for placements\n  static checkEligibility(studentData) {\n    const minCGPA = 7.0;\n    const requiredYear = 4;\n    \n    return studentData.cgpa >= minCGPA && studentData.year >= requiredYear;\n  }\n\n  // Validate student data\n  static validateStudentData(studentData) {\n    const requiredFields = ['name', 'email', 'phone', 'department', 'year', 'cgpa'];\n    \n    for (const field of requiredFields) {\n      if (!studentData[field]) {\n        throw new Error(`${field} is required`);\n      }\n    }\n\n    // Validate email format\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/;\n    if (!emailRegex.test(studentData.email)) {\n      throw new Error('Invalid email format');\n    }\n\n    // Validate CGPA range\n    if (studentData.cgpa < 0 || studentData.cgpa > 10) {\n      throw new Error('CGPA must be between 0 and 10');\n    }\n\n    // Validate year\n    if (studentData.year < 1 || studentData.year > 4) {\n      throw new Error('Year must be between 1 and 4');\n    }\n  }\n\n  // Get eligible students for a job\n  static async getEligibleStudentsForJob(jobCriteria) {\n    try {\n      const allStudents = await studentsAPI.getAll();\n      \n      return allStudents.filter(student => {\n        // Check basic eligibility\n        if (!student.isEligible) return false;\n        \n        // Check CGPA requirement\n        if (student.cgpa < jobCriteria.minCGPA) return false;\n        \n        // Check department requirement\n        if (!jobCriteria.departments.includes(student.department)) return false;\n        \n        // Check year requirement\n        if (student.year < jobCriteria.year) return false;\n        \n        return true;\n      });\n    } catch (error) {\n      throw new Error('Failed to get eligible students: ' + error.message);\n    }\n  }\n\n  // Generate student report\n  static async generateStudentReport(studentId) {\n    try {\n      const student = await studentsAPI.getById(studentId);\n      const applications = await applicationsAPI.getByStudentId(studentId);\n      \n      const report = {\n        student,\n        totalApplications: applications.length,\n        applicationsByStatus: {\n          under_review: applications.filter(app => app.status === 'under_review').length,\n          shortlisted: applications.filter(app => app.status === 'shortlisted').length,\n          accepted: applications.filter(app => app.status === 'accepted').length,\n          rejected: applications.filter(app => app.status === 'rejected').length\n        },\n        recentApplications: applications.slice(-5),\n        eligibilityStatus: student.isEligible ? 'Eligible' : 'Not Eligible'\n      };\n\n      return report;\n    } catch (error) {\n      throw new Error('Failed to generate student report: ' + error.message);\n    }\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}